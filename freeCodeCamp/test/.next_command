builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
run hello-world
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
docker run hello-world
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello terminal
pwd
ls --color=auto
cd freeCodeCamp
ls --color=auto
pwd
ls --color=auto
cd test
ls --color=auto test
pwd test
ls --color=auto test
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo Hello Bash
pwd
cd ..
cd freeCodeCamp
pwd
ls --color=auto
cd project
ls --color=auto
cd freeCodeCamp
test
ls --color=auto
more package.json
clear
ls --color=auto
cd package.json
cd node_modules
ls --color=auto
__vsc_prompt_cmd_original
ls --color=auto l
ls --color=auto -l
clear
pwd
ls --color=auto -l
has yargs
has
cd has
clear
ls --color=auto -l
more README.md
ls --color=auto -l
more licence
more LICENT-MIT
ls --color=auto - l
pwd
ls --color=auto
cd LICENSE-MIT
more LICENSE-MIT
clear
ls --color=auto
cd src
pwd
ls --color=auto
more index.js
cd ..
cd ..
cd ../..
ls --color=auto
clear
mkdir website
ls --color=auto
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
pwd
ls --color=auto
cd website
ls --color=auto
echo hello website
touch index.html
touch styles.css
ls --color=auto
touch index.js
touch .gitignore
ls --color=auto
ls --color=auto --help
ls --color=auto --a
ls --color=auto -a
cd ..
pwd
ls --color=auto
cd website
cd .
touch background.jpg
touch header.png
touch footer.jpeg
ls --color=auto
touch roboto.font
touch lato.font
__vsc_prompt_cmd_original
fouch menlo.font
touch menlo.font
ls --color=auto
touch CodeA11y.svg
ls --color=auto
touch CodeAlly.svg
__vsc_prompt_cmd_original
ls --color=auto
touch CodeRoad.svg
touch freeCodeCamp.svg
ls --color=auto
mkdir images
ls --color=auto
cp background.jpg images
cd images
ls --color=auto
cd ..
ls --color=auto
rm CodeA11y.svg
ls --color=auto
rm background.jpg
ls --color=auto
cp header.png images
cp footer.jpeg images
cd images
__vsc_prompt_cmd_original
ls --color=auto
cd ..
ld
ls --color=auto
rm header.png
rm footer.jpeg
ls --color=auto
mv roboto.font roboto.woff
ls --color=auto
mv lato.font lato.ttf
mv menlo.font menlo.otf
ls --color=auto
mkdir fonts
ls --color=auto
mv menlo.otf fonts
ls --color=auto
cd fonts
ls --color=auto
mv menlo.otf cd ..
mv menlo.otf website
ls --color=auto
cd ..
ls --color=auto
mv roboto.woff fonts
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
ls --color=auto
cd website
find
mv lato.ttf fonts
mv menlo.otf fonts
find
mkdir client
mkdir client/src
mv index.html client/src
find
mv index.js client/src
mv styles.css client/src
find
find client
find help
find client
find --help
find -name index.html
find -name styles.css
find client/src -name styles.css
find -name src
find website
ls --color=auto
find
mv images client
find
mv fonts client
ls --color=auto
mv CodeAlly.svg client
mv CodeRoad.svg client
mv freeCodeCamp.svg client
ls --color=auto
cd cleint
cd client
mkdir assets
cd assets
ls --color=auto
cd ..
ls --color=auto
mv images assets
ls --color=auto
cd assets
ls --color=auto
mkdir images
cd images
ls --color=auto
mkdir background.jpg
rm background.jpg
mkdir background.jpg
touch background.jpg
cd ...
cd ../..
cd ..
ls --color=auto
cd client
cd ..
cd ..
cd website
ls --color=auto
cd client
ls --color=auto
cd assets
ls --color=auto
cd images
ls --color=auto
mv footer.jpeg cd..
ls --color=auto
cd cd..
ls --color=auto
find
rm cd..
ls --color=auto
rm header.png
ls --color=auto
cd ..
cd ../..
touch footer.jpeg
touch header.png
ls --color=auto
mv footer.jpeg client/src/assets/images
find
mv footer.jpeg client/assets/images
mv header.png client/assets/images
find
cd client/assets/images
cd../../..
cd ../../..
ls --color=auto
cd client
ls --color=auto
cd ..
find
cd client/assets/images
cd ../../..
cd images
mkdir images
cd images
ls --color=auto
touch header.png
mv header.png ..
ls --color=auto
d ..
cd ..
ls --color=auto
find
mv header.png client/assets/images
ls --color=auto
cd client/assets/images
find -name images
find -name src
cd ../../..
find -name src
find -name images
ls --color=auto
touch header.png
mv header.png client/assets/images
find -name header.png
find -name footer.jpeg
touch footer.jpeg
mv footer.jpeg client/assets/images
cd client/assets/images/footer.jpeg
mv images/footer.jpeg client/assets/images
ls --color=auto
find
ls --color=auto
rmdir images
ls --color=auto
mkdir images
touch images/background.jpg
cd images
ls --color=auto
cd ..
rm images/background.jpg
rmdir images
ls --color=auto
find
mkdir icons client/assets
mkdir icons ./client/assets
mkdir client/assets/icons
ls --color=auto
touch CodeAlly.svg
mv CodeAlly.svg client/assets/icons
find
find
find
ls --color=auto
touch CodeRoad.svg
mv CodeRoad.svg client/assets/icons
touch freeCodeCamp.svg
mv freeCodeCamp.svg client/assets/icons
find
mkdir client/assets/fonts
touch client/assets/fonts/roboto-bold.woff
touch client/assets/fonts/roboto-light.woff
find -name client/assets/fonts
find client/assets/fonts
touch client/assets/fonts/lato-bold.ttf
touch client/assets/fonts/lato-light.ttf
find
rm -help
rm --help
ls --color=auto
mkdir fonts
touch fonts/blabla.otf
rm -r fonts
ls --color=auto
find
ls --color=auto
touch package.json
touch server.js
touch README.md
ls --color=auto
echo Yay!
find
echo I finished the boilerplate!
echo one more thing..
echo one more thing...
echo I made this boilerplate >> README.md
more README.md
echo from the command line >> README.md
more README.md
echo for the freeCodeCamp bash lessons >> README.md
more README.md
